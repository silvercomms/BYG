plugins {
    id 'net.neoforged.gradle.userdev' version '7.0.41'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

base {
    archivesName = "${mod_name}-neoforge-${minecraft_version}"
}

tasks.build.dependsOn(tasks.shadowJar)

configurations {
    shadow
    implementation.extendsFrom shadow

    library
    implementation.extendsFrom library

    dataImplementation.extendsFrom implementation
    dataCompileOnly.extendsFrom compileOnly
}

sourceSets {
    data
}

minecraft.runs.configureEach {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}


shadowJar {
    configurations = [project.configurations.shadow]
    archiveClassifier.set('')
}
reobf {
    shadowJar {
    }
}

// Automatically enable neoforge AccessTransformers if the file exists
// This location is hardcoded in FML and can not be changed.
// https://github.com/neoforged/FancyModLoader/blob/a952595eaaddd571fbc53f43847680b00894e0c1/loader/src/main/java/net/neoforged/fml/loading/moddiscovery/ModFile.java#L118
if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
    minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')
}

runs {
    configureEach {
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', project(':Common').file('src/generated/resources/').getAbsolutePath(), '--existing', project(':Common').file('src/main/resources/').getAbsolutePath()
    }
}

dependencies {
    minecraft "net.neoforged:neoforge:${forge_version}"
    compileOnly project(":Common")
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    dataImplementation sourceSets.main.output
}


// NeoGradle compiles the game, but we don't want to add our common code to the game's code
Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>

tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).matching(notNeoTask).configureEach {
    from project(":common").sourceSets.main.resources
}

reg.configureJarTask(shadowJar)

mixin {
    add project(":Common").sourceSets.main, "${mod_id}.refmap.json"
    add sourceSets.main, "${mod_id}_forge.refmap.json"

    config "${mod_id}.mixins.json"
    config "${mod_id}_forge.mixins.json"
}

tasks.withType(JavaCompile).configureEach {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources

    filesMatching("${mod_id}.mixins.json") {
        expand "refmap_target": "${mod_id}."
    }
    exclude '.cache/**'

    exclude('data/c/tags/**')
    exclude('data/fabric/tags/**')
}

jar.finalizedBy('reobfJar')

jar.archiveClassifier.set('slim')

task forge_checkForRefmap() {
    doLast {
        File file1 = shadowJar.archiveFile.get().asFile
        logger.info("Verifying refmap exists...")
        if (file1.exists()) {
            FileTree files = zipTree(file1)
            Set<String> fileNames = files.getFiles().stream().map(file -> file.getName()).collect(Collectors.toSet())

            String forgeRefmap = "${mod_id}_forge.refmap.json"
            String commonRefmap = "${mod_id}.refmap.json"
            if (!fileNames.contains(forgeRefmap) || !fileNames.contains(commonRefmap)) {
                throw new IllegalStateException("Refmap is missing.")
            }
        } else {
            throw new IllegalStateException("File is missing.")
        }
        logger.info("Refmap found!")
    }
}

String changelogText = projectDir.toPath().getParent().resolve("CHANGELOG.md").getText('UTF-8')

String dependencyText = """
# Required Dependencies


_Links redirect to the dependency's file listing with filters by game version and mod loader applied._

- Terrablender - [Curseforge](https://www.curseforge.com/minecraft/mc-mods/terrablender/files?version=${project.minecraft_version}&gameVersionTypeId=1) or [Modrinth](https://modrinth.com/mod/terrablender/versions?g=${project.minecraft_version}&l=forge) .

- GeckoLib - [Curseforge](https://www.curseforge.com/minecraft/mc-mods/geckolib/files?version=${project.minecraft_version}&gameVersionTypeId=1) or [Modrinth](https://modrinth.com/mod/geckolib/versions?g=${project.minecraft_version}&l=forge) .

- CorgiLib - [Curseforge](https://www.curseforge.com/minecraft/mc-mods/corgilib/files?gameVersionTypeId=1&version=${project.minecraft_version}) or [Modrinth](https://modrinth.com/mod/corgilib/versions?g=${project.minecraft_version}&l=forge) .


# Changelog

"""
