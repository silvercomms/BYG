import com.modrinth.minotaur.TaskModrinthUpload
import com.modrinth.minotaur.dependencies.DependencyType
import com.modrinth.minotaur.dependencies.ModDependency
import net.darkhax.curseforgegradle.TaskPublishCurseForge

import java.util.stream.Collectors

buildscript {
    repositories {
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    }
}

plugins {
    id 'fabric-loom' version '1.3-SNAPSHOT'
    id 'maven-publish'
    id 'idea'
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id "net.darkhax.curseforgegradle" version "1.1.16"
    id "com.modrinth.minotaur" version "2.+"
}

tasks.build.dependsOn(tasks.shadowJar)

configurations {
    shadow
    implementation.extendsFrom(shadow)
}
shadowJar {
    configurations = [project.configurations.shadow]
}

archivesBaseName = "${mod_name}-fabric-${minecraft_version}"

repositories {
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven {
        name = 'Forge'
        url = 'https://maven.minecraftforge.net'
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}+${minecraft_version}"
    modImplementation include("com.github.Chocohead:Fabric-ASM:2.3")
    implementation project(":Common")
}
reg.configureJarTask(shadowJar)

loom {
    accessWidenerPath = project(":Common").file("src/main/resources/byg.aw")
    runs {
        def args = ["-DbygDev=true", "-DbygGenerateData=true"]

        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
            vmArgs(args)
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
            vmArgs(args)
        }

        datagen {
            inherit server
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${project(':Common').file("src/test/generated")}"
            vmArg "-Dfabric-api.datagen.modid=byg"

            runDir "build/datagen"
        }
    }
}

processResources {
//    from project(":Common").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

    filesMatching("${mod_id}.mixins.json") {
        expand "refmap_target": "${archivesBaseName}-"
    }
}

//tasks.withType(JavaCompile) {
//    source(project(":Common").sourceSets.main.allSource)
//}
tasks.withType(Javadoc).configureEach {
    failOnError false
}

jar {
    from("LICENSE") {
        rename { "${it}_${mod_name}" }
    }
}
// Disable to build with gradle //TODO: Fix gradle + building w/ intellij
sourceSets {
    main {
        java {
//            srcDir 'src/main/java'
            srcDirs project(':Common').sourceSets.main.java.srcDirs
        }
        resources {
//            srcDir 'src/main/resources'
            srcDirs project(':Common').sourceSets.main.resources.srcDirs
        }
    }
}

remapJar.inputFile.set(shadowJar.archiveFile)

task fabric_checkForRefmap() {
    doLast {
        File file1 = remapJar.archiveFile.get().asFile
        logger.info("Verifying refmap exists...")
        if (file1.exists()) {
            FileTree files = zipTree(file1)
            Set<String> fileNames = files.getFiles().stream().map(file -> file.getName()).collect(Collectors.toSet())

            String refmap = "${archivesBaseName}-refmap.json"
            if (!fileNames.contains(refmap)) {
                throw new IllegalStateException("Refmap is missing.")
            }
        } else {
            throw new IllegalStateException("File is missing.")
        }
        logger.info("Refmap found!")
    }
}

String changelogText = projectDir.toPath().getParent().resolve("CHANGELOG.md").getText('UTF-8')

String dependencyText = """
# Required Dependencies


_Links redirect to the dependency's file listing with filters by game version and mod loader applied._

- Terrablender - [Curseforge](https://www.curseforge.com/minecraft/mc-mods/terrablender-fabric/files?version=${project.minecraft_version}&gameVersionTypeId=4) .

- GeckoLib - [Curseforge](https://www.curseforge.com/minecraft/mc-mods/geckolib/files?version=${project.minecraft_version}&gameVersionTypeId=4) or [Modrinth](https://modrinth.com/mod/geckolib/versions?g=${project.minecraft_version}&l=fabric).

- CorgiLib - [Curseforge](https://www.curseforge.com/minecraft/mc-mods/corgilib/files?gameVersionTypeId=4&version=${project.minecraft_version}) or [Modrinth](https://modrinth.com/mod/corgilib/versions?g=${project.minecraft_version}&l=fabric).

- Fabric API - [Curseforge](https://www.curseforge.com/minecraft/mc-mods/fabric-api/files?version=${project.minecraft_version}&gameVersionTypeId=4) or [Modrinth](https://modrinth.com/mod/fabric-api/versions?g=${project.minecraft_version}&l=fabric).

# Changelog

"""


task fabric_publishCurseForge(type: TaskPublishCurseForge) {
    apiToken = "$System.env.CURSEFORGE_KEY"

    def mainFile = upload(project.fabric_curseforge_id, remapJar)
    mainFile.changelog = dependencyText + changelogText
    mainFile.changelogType = "markdown"
    mainFile.releaseType = "${project.release_type}"
    mainFile.addRequirement("terrablender-fabric")
    mainFile.addRequirement("geckolib")
    mainFile.addRequirement("corgilib")
    mainFile.addRequirement("fabric-api")
    mainFile.addGameVersion("${project.minecraft_version}")
    mainFile.addModLoader("fabric")
}

// Make sure it runs after build!
task fabric_publishModrinth (type: TaskModrinthUpload){
    modrinth {
        token = "$System.env.MODRINTH_KEY"
        projectId = "${project.modrinth_id}"
        versionName = "${archivesBaseName}-${project.version}"
        versionNumber = "${project.minecraft_version}-${project.version}-fabric"
        versionType = "${project.release_type}"
        uploadFile = remapJar
        dependencies = [new ModDependency("ziOp6EO8", DependencyType.REQUIRED), new ModDependency("8BmcQJ2H", DependencyType.REQUIRED), new ModDependency("P7dR8mSH", DependencyType.REQUIRED)] //TODO: Add terrablender when available.

        String modrinthChangelogText = dependencyText + changelogText.substring(0, changelogText.indexOf("# 2", changelogText.indexOf("# 2") + 1)).trim()
        changelog = modrinthChangelogText

        gameVersions = ["${project.minecraft_version}"]
        loaders = ['fabric']
    }
}

task fabric_buildAndReleaseCurseforge {}
tasks.fabric_checkForRefmap.mustRunAfter tasks.build
tasks.fabric_publishCurseForge.mustRunAfter tasks.fabric_checkForRefmap
tasks.fabric_buildAndReleaseCurseforge.dependsOn(tasks.build, tasks.fabric_checkForRefmap, tasks.fabric_publishCurseForge)

task fabric_buildAndReleaseModrinth {}
tasks.fabric_checkForRefmap.mustRunAfter tasks.build
tasks.fabric_publishModrinth.mustRunAfter tasks.fabric_checkForRefmap
tasks.fabric_buildAndReleaseModrinth.dependsOn(tasks.build, tasks.fabric_checkForRefmap, tasks.fabric_publishModrinth)

task fabric_buildAndReleaseModrinthAndCurseforge {}
tasks.fabric_checkForRefmap.mustRunAfter tasks.build
tasks.fabric_publishCurseForge.mustRunAfter tasks.fabric_checkForRefmap
tasks.fabric_publishModrinth.mustRunAfter tasks.fabric_publishCurseForge
tasks.fabric_buildAndReleaseModrinthAndCurseforge.dependsOn(tasks.build, tasks.fabric_checkForRefmap, tasks.fabric_publishCurseForge, tasks.fabric_publishModrinth)
